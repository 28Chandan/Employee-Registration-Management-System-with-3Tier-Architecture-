//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IPAS.HRDashboard_ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HRDashboard_ServiceReference.IHRDashboardService")]
    public interface IHRDashboardService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetCountInfo", ReplyAction="http://tempuri.org/IHRDashboardService/GetCountInfoResponse")]
        iPAS_Service.CountInfo GetCountInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetCountInfo", ReplyAction="http://tempuri.org/IHRDashboardService/GetCountInfoResponse")]
        System.Threading.Tasks.Task<iPAS_Service.CountInfo> GetCountInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetEmployeeDetails", ReplyAction="http://tempuri.org/IHRDashboardService/GetEmployeeDetailsResponse")]
        iPAS_Service.RegistrationInfoClass GetEmployeeDetails(iPAS_Service.RegistrationInfo employeeDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetEmployeeDetails", ReplyAction="http://tempuri.org/IHRDashboardService/GetEmployeeDetailsResponse")]
        System.Threading.Tasks.Task<iPAS_Service.RegistrationInfoClass> GetEmployeeDetailsAsync(iPAS_Service.RegistrationInfo employeeDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/TotDeptCountInfo", ReplyAction="http://tempuri.org/IHRDashboardService/TotDeptCountInfoResponse")]
        bool TotDeptCountInfo(iPAS_Service.DepartmentInfo dept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/TotDeptCountInfo", ReplyAction="http://tempuri.org/IHRDashboardService/TotDeptCountInfoResponse")]
        System.Threading.Tasks.Task<bool> TotDeptCountInfoAsync(iPAS_Service.DepartmentInfo dept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/DeleteEmpOrDept", ReplyAction="http://tempuri.org/IHRDashboardService/DeleteEmpOrDeptResponse")]
        bool DeleteEmpOrDept(int empID, int deptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/DeleteEmpOrDept", ReplyAction="http://tempuri.org/IHRDashboardService/DeleteEmpOrDeptResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmpOrDeptAsync(int empID, int deptID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/AcceptRejectEmpl", ReplyAction="http://tempuri.org/IHRDashboardService/AcceptRejectEmplResponse")]
        bool AcceptRejectEmpl(iPAS_Service.RegistrationInfo emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/AcceptRejectEmpl", ReplyAction="http://tempuri.org/IHRDashboardService/AcceptRejectEmplResponse")]
        System.Threading.Tasks.Task<bool> AcceptRejectEmplAsync(iPAS_Service.RegistrationInfo emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/AddNewHR", ReplyAction="http://tempuri.org/IHRDashboardService/AddNewHRResponse")]
        iPAS_Service.ErrorInfo AddNewHR(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/AddNewHR", ReplyAction="http://tempuri.org/IHRDashboardService/AddNewHRResponse")]
        System.Threading.Tasks.Task<iPAS_Service.ErrorInfo> AddNewHRAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetALLHRDetails", ReplyAction="http://tempuri.org/IHRDashboardService/GetALLHRDetailsResponse")]
        iPAS_Service.RegistrationInfoClass GetALLHRDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/GetALLHRDetails", ReplyAction="http://tempuri.org/IHRDashboardService/GetALLHRDetailsResponse")]
        System.Threading.Tasks.Task<iPAS_Service.RegistrationInfoClass> GetALLHRDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/DeleteHR", ReplyAction="http://tempuri.org/IHRDashboardService/DeleteHRResponse")]
        bool DeleteHR(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHRDashboardService/DeleteHR", ReplyAction="http://tempuri.org/IHRDashboardService/DeleteHRResponse")]
        System.Threading.Tasks.Task<bool> DeleteHRAsync(int empID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHRDashboardServiceChannel : IPAS.HRDashboard_ServiceReference.IHRDashboardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HRDashboardServiceClient : System.ServiceModel.ClientBase<IPAS.HRDashboard_ServiceReference.IHRDashboardService>, IPAS.HRDashboard_ServiceReference.IHRDashboardService {
        
        public HRDashboardServiceClient() {
        }
        
        public HRDashboardServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HRDashboardServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HRDashboardServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HRDashboardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public iPAS_Service.CountInfo GetCountInfo() {
            return base.Channel.GetCountInfo();
        }
        
        public System.Threading.Tasks.Task<iPAS_Service.CountInfo> GetCountInfoAsync() {
            return base.Channel.GetCountInfoAsync();
        }
        
        public iPAS_Service.RegistrationInfoClass GetEmployeeDetails(iPAS_Service.RegistrationInfo employeeDetails) {
            return base.Channel.GetEmployeeDetails(employeeDetails);
        }
        
        public System.Threading.Tasks.Task<iPAS_Service.RegistrationInfoClass> GetEmployeeDetailsAsync(iPAS_Service.RegistrationInfo employeeDetails) {
            return base.Channel.GetEmployeeDetailsAsync(employeeDetails);
        }
        
        public bool TotDeptCountInfo(iPAS_Service.DepartmentInfo dept) {
            return base.Channel.TotDeptCountInfo(dept);
        }
        
        public System.Threading.Tasks.Task<bool> TotDeptCountInfoAsync(iPAS_Service.DepartmentInfo dept) {
            return base.Channel.TotDeptCountInfoAsync(dept);
        }
        
        public bool DeleteEmpOrDept(int empID, int deptID) {
            return base.Channel.DeleteEmpOrDept(empID, deptID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmpOrDeptAsync(int empID, int deptID) {
            return base.Channel.DeleteEmpOrDeptAsync(empID, deptID);
        }
        
        public bool AcceptRejectEmpl(iPAS_Service.RegistrationInfo emp) {
            return base.Channel.AcceptRejectEmpl(emp);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptRejectEmplAsync(iPAS_Service.RegistrationInfo emp) {
            return base.Channel.AcceptRejectEmplAsync(emp);
        }
        
        public iPAS_Service.ErrorInfo AddNewHR(string userName, string password) {
            return base.Channel.AddNewHR(userName, password);
        }
        
        public System.Threading.Tasks.Task<iPAS_Service.ErrorInfo> AddNewHRAsync(string userName, string password) {
            return base.Channel.AddNewHRAsync(userName, password);
        }
        
        public iPAS_Service.RegistrationInfoClass GetALLHRDetails() {
            return base.Channel.GetALLHRDetails();
        }
        
        public System.Threading.Tasks.Task<iPAS_Service.RegistrationInfoClass> GetALLHRDetailsAsync() {
            return base.Channel.GetALLHRDetailsAsync();
        }
        
        public bool DeleteHR(int empID) {
            return base.Channel.DeleteHR(empID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteHRAsync(int empID) {
            return base.Channel.DeleteHRAsync(empID);
        }
    }
}
